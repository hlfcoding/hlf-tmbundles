{	scopeName = 'source.js';
	comment = '

	JavaScript Syntax: version 2.0

	- More up to date support.
	- Accounts for JS boilerplate language.
	- Imputes for highlighting; more highlighted.
	- Assumes you are experienced with JS and are looking for a bundle that makes
	  it less painful to write all day, in lieu of CoffeeScript.

	';
	fileTypes = ( 'js' );
	foldingStartMarker = '/\*\*(?!\*) [A-Z]|\{\s*($|/\*(?!.*\*/.*\S))';
	foldingStopMarker = '(?<!\*)\*\*/|^\s*\}';
	patterns = (
		{
			name = 'meta.declaration.function.js';
			comment = '
			[CONFLICTED] Matches `foo: function` or `foo: function ([params]) {` or `function foo ([params]) {` or `[call] "some:event", function...`.
			';
			begin = '([''"]?\$*[a-z0-9_][a-zA-Z0-9_:]*\w[''"]?)?\s*([=:,])?\s*(\()?\b(function)\b\s*(\$*[a-z0-9_]\w*)?\b(?=\()';
			end = '({)';
			beginCaptures = {
				1 = { name = 'entity.name.declaration.function.js'; };
				2 = { name = 'keyword.operator.js'; };
				3 = { name = 'meta.brace.round.js'; };
				4 = { name = 'storage.type.js'; };
				5 = { name = 'entity.name.declaration.function.js'; };
			};
			endCaptures = { 1 = { name = 'meta.brace.curly.js'; }; };
			patterns = ( { include = '#parameters'; } );
		},
		{	name = 'keyword.other.directive.js';
			comment = 'Since this needs to override string, this needs to go before it.';
			match = '^\s*"use strict"\s*$';
		},
		{	name = 'keyword.control.js';
			comment = 'Added `let` from Harmony.';
			match = '\b(break|case|catch|continue|default|do|else|finally|for|goto|if|import|let|package|return|switch|throw|try|while)\b';
		},
		{	name = 'comment.block.html.js';
			comment = '
			[CONFLICT] Only highlight the start and end markers.
			For CDATA? Make sure to include in your theme!
			';
			begin = '<\!--';
			end = '-->';
			beginCaptures = { 0 = { name = 'punctuation.definition.comment.html.js'; }; };
			endCaptures = { 0 = { name = 'punctuation.definition.comment.html.js'; }; };
		},
		{	name = 'keyword.operator.js';
			comment = 'Note each match is exact. A better way?';
			match = '\b(delete|in|instanceof|new|typeof|with)\b|!|%|&|\*|\-\-|\-|\+\+|\+|~|===|==|=|!=|!==|<=|>=|<<=|>>=|>>>=|<>|<|>|&&|\|\||\?\:|\?|\:|\*=|(?<!\()/=|%=|\+=|\-=|&=|\^=';
		},
		{	name = 'variable.language.js';
			comment = 'These are technically variables, but they are more magical.';
			match = '\b(this|super|arguments|(?<=\.)(prototype|constructor|caller))\b';
		},
		{	name = 'keyword.other.environmentjs';
			match = '\b(debugger)\b';
		},
		{	name = 'comment.block.documentation.js';
			comment = 'Simple ranged search, where `/**/` is exempt.';
			begin = '/\*\*(?!/)';
			end = '\*/';
			captures = { 0 = { name = 'punctuation.definition.comment.js'; }; };
		},
		{	name = 'comment.block.js';
			comment = 'Simple ranged search.';
			begin = '/\*';
			end = '\*/';
			captures = { 0 = { name = 'punctuation.definition.comment.js'; }; };
		},
		{	name = 'comment.line.double-slash.js';
			comment = 'Simple search from end of line using wildcard.';
			match = '(//).*$\n?';
			captures = { 1 = { name = 'punctuation.definition.comment.js'; }; };
		},
		{	name = 'storage.type.js';
			comment = 'Basic.';
			match = '\b(boolean|byte|char|class|double|enum|float|function|int|interface|long|short|var|void)\b';
		},
		{	name = 'storage.modifier.js';
			comment = 'Basic.';
			match = '\b(const|export|extends|final|implements|native|private|protected|public|static|synchronized|throws|transient|volatile)\b';
		},
		{	name = 'constant.language.boolean.true.js';
			comment = 'Basic.';
			match = '\btrue\b';
		},
		{	name = 'constant.language.boolean.false.js';
			comment = 'Basic.';
			match = '\bfalse\b';
		},
		{	name = 'constant.language.null.js';
			comment = 'Basic.';
			match = '\bnull\b';
		},
		{	name = 'constant.language.js';
			comment = 'Basic.';
			match = '\b(Infinity|NaN|undefined)\b';
		},
		{	name = 'constant.numeric.js';
			comment = 'Basic.';
			match = '\b((0(x|X)[0-9a-fA-F]+)|([0-9]+(\.[0-9]+)?))\b';
		},
		{	name = 'punctuation.terminator.statement.js';
			comment = 'Basic.';
			match = '\;';
		},
		{	name = 'meta.delimiter.period.js';
			comment = 'Basic.';
			match = '\.';
		},
		{	name = 'meta.delimiter.comma.js';
			comment = 'Liberally allows trailing whitespace.';
			match = ',[ |\t]*';
		},
		{	name = 'meta.brace.curly.js';
			comment = 'Basic.';
			match = '\{|\}';
		},
		{	name = 'string.regexp.js';
			comment = '
			[CONFLICT] Only match if preceded by certain things. Follows linting
			advice and wraps an optional `()`.';
			begin = '(?<=[=(:]|^|return|&&|\|\||!)\s*\(?(/)(?![/*+{}?])';
			end = '(/)[igm]*\)?';
			beginCaptures = { 1 = { name = 'punctuation.definition.string.begin.js'; }; };
			endCaptures = { 1 = { name = 'punctuation.definition.string.end.js'; }; };
			patterns = ( { include = '#simple-escaped-char'; } );
		},
		{	name = 'meta.brace.round.js';
			comment = 'Basic.';
			match = '\(|\)';
		},
		{	name = 'meta.brace.square.js';
			comment = 'Basic.';
			match = '\[|\]';
		},
		{	name = 'string.quoted.double.js';
			comment = '
			Simple range search. Tokenize the quotes. Add complex regex for utf
			escape. Placed at the head to give priority.
			';
			begin = '"';
			end = '"';
			beginCaptures = { 0 = { name = 'punctuation.definition.string.begin.js'; }; };
			endCaptures = { 0 = { name = 'punctuation.definition.string.end.js'; }; };
			patterns = ( { include = '#escaped-char'; } );
		},
		{	name = 'string.quoted.single.js';
			comment = '
			Simple range search. Tokenize the quotes. Add complex regex for utf
			escape. Placed at the head to give priority.
			';
			begin = "'";
			end = "'";
			beginCaptures = { 0 = { name = 'punctuation.definition.string.begin.js'; }; };
			endCaptures = { 0 = { name = 'punctuation.definition.string.end.js'; }; };
			patterns = ( { include = '#escaped-char'; } );
		},
		{	name = 'support.global.language.js';
			comment = 'Language globals. Basic';
			match = '\b(JSON|Math|console)\b';
		},
		{	name = 'support.global.dom.js';
			comment = 'Language globals. Basic';
			match = '\b(document|event|window|screen)\b';
		},
		{	name = 'support.function.language.js';
			comment = 'Language non-constructor functions only. Includes Date instances. Includes Harmony features and base function methods. Basic.';
			match = '\b(((de|en)codeURI(Component)?)|(un)?eval|is(Finite|NaN)|parse(Float|Int)|(?<=\.|\.prototype\.)((to(Locale)?String)|(value|isPrototype)Of|hasOwnProperty|propertyIsEnumerable|bind|call|apply)|Date\.UTC|(?<=Date\.prototype\.|date\.)((g|s)et(Date|Day|FullYear|Hours|Milliseconds|Minutes|Month|Seconds|Time|TimezoneOffset|UTC(Date|Day|FullYear|Hours|Milliseconds|Minutes|Month|Seconds)|Year)|now|parse|to((Date|GMT|ISO|Locale(Date|Time)|Time|UTC)String|LocaleFormat|Source|JSON)))\b';
		},
		{	name = 'support.variable.language.js';
			comment = 'Language properties only. Includes Date instances. Includes Harmony features and base function methods. Basic.';
			match = '\b(?<=\.|\.prototype\.)(name|length)\b';
		},
		{	name = 'support.type.class.language.js';
			comment = 'Language constructors only. Basic.';
			match = '\b(Array|Boolean|Date|Function|Iterator|Number|Object|RegExp|String|ArrayBuffer|Float32Array|Float64Array|Int16Array|Int32Array|Int8Array|Uint16Array|Uint32Array|Uint8Array|Uint8ClampedArray|Error|EvalError|InternalError|RangeError|ReferenceError|StopIteration|SyntaxError|TypeError|URIError|DataView)\b';
		},
		{	name = 'support.type.class.dom.js';
			comment = 'DOM constructors only. Includes all dom, HTML, SVG, etc. Basic.';
			match = '\b(Attr|Audio(ProcessingEvent)?|BeforeLoadEvent|Blob|CDATASection|CharacterData|Comment|Document(Fragment|Type)|DomConfiguration|DOM(Error|ErrorHandler|Exception|Implementation(List|Registry|Source)?|Locator|Object|String(List)?|TimeStamp|UserData|(Settable)?TokenList|StringMap)|Entity(Reference)?|MediaQueryList(Listener)?|NameList|NamedNodeMap|Node(Filter|Iterator|List)?|Notation|Plugin(Array)?|ProcessingInstruction|SharedWorker|Text|TimeRanges|Treewalker|TypeInfo|UserDataHandler|Worker(GlobalScope)?|HTML(Document|Element|(Anchor|Applet|Audio|Area|Base|BaseFont|Body|BR|Button|Canvas|Directory|Div|DList|Embed|FieldSet|Font|Form|Frame|FrameSet|Head|Heading|Html|HR|IFrame|Image|Input|Keygen|Label|LI|Link|Map|Menu|Meta|Mod|Object|OList|OptGroup|Option|Output|Paragraph|Param|Pre|Quote|Script|Select|Source|Span|Style|Table(Caption|(Data|Header)?Cell|Col|Row|Section)?|TextArea|Time|Title|Track|UList|Unknown|Video)Element|(All|FormControls|Options|Properties)?Collection)|ElementTimeControl|TimeEvent|Canvas(RenderingContext2D|Gradient|Pattern|PixelArray)|TextMetrics|ImageData|NotifyAudioAvailableEvent|RadioNodeList|SVG(Document|Element|(A|AltGlyph(Def|Item)?|Animation|Animate(Color|Motion|Transform)?|Set|Circle|ClipPath|ColorProfile|Cursor|Defs|Desc|Ellipse|Filter|FE(Blend|ColorMatrix|ComponentTransfer|Composite|ConvolveMatrix|DiffuseLighting|DisplacementMap|DistantLight|Flood|GaussianBlur|Image|Merge(Node)?|Morphology|Offset|(Point|Spot)Light|SpecularLighting|Tile|Turbulence|Func(R|G|B|A))|ComponentTransferFunction|Font(Face(Format|Name|Src|Uri)?)?|ForeignObject|G|Glyph|GlyphRef|(Linear|Radial)?Gradient|HKern|Image|Line|Marker|Mask|Metadata|MissingGlyph|(M|)Path|Pattern|Polyline|Polygon|Rect|Script|Stop|Style|Switch|Symbol|Text|TextPath|Title|TRef|TSpan|Use|View|VKern)Element|Angle|Color|ICCColor|Element(Instance(List)?)|Length(List)?|Matrix|Number(List)?|Paint|Point(List)?|PreserveAspectRatio|Rect|StringList|Transform(List)?|Animated(Angle|Boolean|Enumeration|Integer|Length(List)?|Number(List)?|PreserveAspectRatio|Rect|String|TransformList)|Path(Seg(List|ArcAbs|ArcRel|ClosePath|Curve(to(Cubic((Smooth)?(Abs|Rel))|Quadratic((Smooth)?(Abs|Rel))))|Line(to((Horizontal|Vertical)?(Abs|Rel)))|Moveto(Abs|Rel))?)|FilterPrimitiveStandardAttributes|AnimatedPathData)|CSS((Charset|FontFace|Import|Media|Page)Rule|PrimitiveValue|Rule(List)?|Style(Declaration|Rule|Sheet))|DOM(Parser|DateInput)|Document|Element|(Error)?Event|Event(Exception|Source)?|File(Error|List|Reader)?|FormData|HashChangeEvent|Image|Intent|KeyboardEvent|Media(Controller|Error|List|StreamEvent)|Message(Channel|Event|Port)|MimeType(Array)?|(Mouse|Mutation|OfflineAudioCompletion|Overflow|PageTransition|PopState|Progress|Text|Touch|UI|Wheel)Event|Option|RGBColor|Range(Exception)?|Rect|SQLException|SVG(ZoomEvent|UnitTypes)|WebSocket|WebGL(ActiveInfo|Buffer|ContextEvent|FrameBuffer|Program|Render(Buffer|ingContext)|Shader|Texture|UniformLocation)|WebKit(AnimationEvent|BlobBuilder|CSS((Filter|Transform)Value|(Keyframes?|Region)Rule|Matrix)|Mutation(Observer|Point|TransitionEvent))|XMLHTTPRequest|Device(Mo|Orienta)tionEvent)\b';
		},
		{	name = 'support.constant.dom.js';
			comment = 'Basic.';
			match = '\b(ELEMENT_NODE|ATTRIBUTE_NODE|TEXT_NODE|CDATA_SECTION_NODE|ENTITY_REFERENCE_NODE|ENTITY_NODE|PROCESSING_INSTRUCTION_NODE|COMMENT_NODE|DOCUMENT_NODE|DOCUMENT_TYPE_NODE|DOCUMENT_FRAGMENT_NODE|NOTATION_NODE|INDEX_SIZE_ERR|DOMSTRING_SIZE_ERR|HIERARCHY_REQUEST_ERR|WRONG_DOCUMENT_ERR|INVALID_CHARACTER_ERR|NO_DATA_ALLOWED_ERR|NO_MODIFICATION_ALLOWED_ERR|NOT_FOUND_ERR|NOT_SUPPORTED_ERR|INUSE_ATTRIBUTE_ERR)\b';
		},
		{	name = 'support.function.debug.js';
			comment = 'The console object is not standard. Should this be declaration match?';
			match = '\b(?<=console\.)(warn|info|log|error|time|timeEnd|assert|dir(xml)?|group(Collapsed|End)?|markTimeline|memory|profile(End|s)?|time(End|Stamp)?|trace)\b';
		},
		{	name = 'support.variable.global.dom.js';
			comment = '
			`window.[prop]` or `[prop]`.
			Includes navigator, screen, URL, bars.';
			match = '\b(?<=window\.|^|[^.])(applicationCache|controllers|crypto|defaultStatus|dialogArguments|closed|content|directories|document|frame(Element|s)|fullScreen|history|inner(Height|Width)|length|location(bar)?(\.visible)?|menubar(\.visible)?|messageManager|mozAnimationStartTime|moz(InnerScreen(X|Y)|PaintCount)|navigator|opener|outer(Height|Width)|parent|personalbar|pkcs11|(screen|scroll)(X|Y)|top|toolbar(\.visible)?|status(bar)?|sidebar|scrollbars|self|scrollMax(X|Y)|URL|window|page(X|Y)Offset|offscreenBuffering|localStorage)|(?<=navigator\.)((app(CodeName|Name|Version)|buildID|(cookie|java)Enabled|language|mimeTypes|mozIsLocallyAvailable|onLine|oscpu|platform|plugins|product(Sub)?)|registerContentHandler|userAgent|vendor(Sub)?|geolocation)|(?<=screen\.)(avail(Height|Left|Top|Width)|colorDepth|height|left|pixelDepth|top|width)\b';
		},
		{	name = 'support.function.global.dom.js';
			comment = '
			`window.[fn]()` or `[fn]()`.
			Includes URL, location, localStorage, document, navigator.history, geolocation, crypto
			';
			match = '\b(?<=window\.|^|[^.])(alert|atob|back|blur|btoa|clear(Immediate|Interval|Timeout)|close|confirm|dump|escape|find|focus|forward|get(Attention|ComputedStyle|Selection)|home|matchMedia|move(By|To)|open(Dialog)?|postMessage|print|prompt|requestAnimationFrame|resize(By|To)|scroll(By(Lines|Pages)?|To)?|set(Cursor|Immediate|Interval|Timeout)|showModalDialog|sizeToContent|stop|unescape|updateCommands)|(?<=URL\.)((create|revoke)ObjectURL)|(?<=localStorage\.)(clear|(get|set|remove)Item|key)|(?<=location\.|document\.location\.)(assign|hash|host(name)?|href|origin|pathname|port|protocol|search|reload|replace)|(?<=navigator\.geolocation\.)((getCurrent|watch)Position)|(?<=history\.)(back|forward|go|(push|replace)State)|(?<=crypto\.)(getRandomValues)|(?<=doc\.|document\.)(URL|activeElement|adoptNode|alinkColor|anchors|applets|async|baseURIObject|bgColor|body|characterSet|clear|close|compatMode|contentType|cookie|create(Attribute|CDATASection|Comment|DocumentFragment|Element|ElementNS|EntityReference|Event|Expression|NSResolver|ProcessingInstruction|Range|TextNode|TreeWalker)|currentScript|defaultView|doctype|document(Element|URI(Object)?)|domain|elementFromPoint|embeds|enableStyleSheetsForSet|evaluate|fgColor|forms|get(BoxObjectFor|Elements?By(Id|ClassName|Name|TagName(NS)?))|hasFocus|height|images|implementation|importNode|inputEncoding|last(Modified|StyleSheetSet)|link(Color|s)|load(Overlay)?|location|moz(CancelFullScreen|FullScreen(Element|Enabled)?|SetImageElement|SyntheticDocument)|onreadystatechange|open|plugins|popupNode|preferredStyleSheetSet|query(CommandSupported|Selector(All)?)|readyState|referrer|releaseCapture|scripts|selectedStyleSheetSet|styleSheet(Set)?s|title|tooltipNode|vlinkColor|width|write(ln)?|xmlVersion)\b';
		},
		{	name = 'support.function.instance.dom.js';
			comment = '
			Assumes the var is named a certain way. This includes functions and variables.
			Includes element, event, form, range, table, document, worker.
			';
			match = '\b(?<=el\.|elem\.|element\.)(addEventListener|baseURIObject|blur|childElementCount|children|class(List|Name)|click|client(Height|Left|Top|Width)|(c|isC)ontentEditable|dataset|dir|dispatchEvent|firstElementChild|focus|get(Attribute(NS|Node(NS)?)?|BoundingClientRect|ClientRects|ElementsByTagName(NS)?)|hasAttribute(NS)?|id|(inner|insertAdjacent)HTML|item|lang|lastElementChild|moz(MatchesSelector|RequestFullScreen)|name|nextElementSibling|offset(Height|Left|Parent|Top|Width)|on((after|before)scriptexecute|blur|change|click|copy|cut|dblclick|focus|key(down|press|up)|mouse(down|move|out|over|up)|paste|resize|scroll)|outerHTML|previousElementSibling|querySelector(All)?|remove(Attribute(NS|Node)?|EventListener)|scroll(Height|IntoView|Left|Top|Width)|set(Attribute(NS|Node(NS)?)?|Capture)|style|tabIndex|tagName|title)|(?<=worker\.)(postMessage|terminate)|(?<=e\.|evt\.|event\.)(cancel(Bubble|able)|client(X|Y)|ctrlKey|currentTarget|defaultPrevented|detail|eventPhase|explicitOriginalTarget|init(Key|Mouse|UI)?Event|metaKey|mozInputSource|originalTarget|preventDefault|relatedTarget|screen(X|Y)|shiftKey|stop(Immediate)?Propagation|target|timeStamp|type|view|acceleration(IncludingGravity)?|interval|rotationRate|absolute|alpha|beta|gamma)|(?<=frm\.|form\.)(acceptCharset|action|elements|enctype|length|method|name|reset|submit|target)|(?<=range\.)(clone(Contents|Range)|collapsed?|commonAncestorContainer|compare(BoundaryPoints|Node|Point)|createContextualFragment|deleteContents|detach|end(Container|Offset)|extractContents|get(Bounding)?ClientRects?|(insert|intersects)Node|isPointInRange|selectNode(Contents)?|set(End(After|Before)?|Start(After|Before)?)|start(Container|Offset)|surroundContents)|(?<=tbl\.|table\.)(align|bgColor|border|caption|cell(Padding|Spacing)|create(Caption|TFoot|THead)|delete(Caption|Row|TFoot|THead)|frame|insertRow|rows|rules|summary|tBodies|tFoot|tHead|width)\b';
		},
		{	name = 'support.variable.instance.dom.js';
			comment = '
			Assumes the var is named a certain way. 
			Includes element, event, form, range, table, document, worker.
			';
			match = '\b(el(em(ent)?)?|e(v(en)?t)?|fo?rm|range|ta?ble?|doc(ument)?|worker|date)\b';
		},
		{	name = 'support.function.event-handler.js';
			comment = '
			Matches either `window.on[foo]` or `on[foo]` or `"onfoo"`.
			Case insensitive.
			';
			match = '\b(?<=window\.|^|[^.])(on(?i:r(ow(s(inserted|delete)|e(nter|xit))|e(s(ize(start|end)?|et)|adystatechange))|mouse(o(ut|ver)|down|up|move)|b(efore(cut|deactivate|u(nload|pdate)|p(aste|rint)|editfocus|activate)|lur)|s(croll|top|ubmit|elect(start|ionchange)?)|h(ashchange|over|elp)|c(hange|ont(extmenu|rolselect)|ut|ellchange|l(ick|ose))|d(evice((mo|orienta)tion)|eactivate|ata(setc(hanged|omplete)|available)|r(op|ag(start|over|drop|en(ter|d)|leave)?)|blclick)|unload|(mozbefore)?paint|p(opstate|aste|ropertychange)|error(update)?|key(down|up|press)|focus|load|a(ctivate|fter(update|print)|bort)))\b';
		},
		{	name = 'support.global.alias.js';
			comment = 'Various common aliases.';
			match = '\$';
		},
		{	name = 'meta.declaration.class.js';
			comment = '
			Matches `Foo.Bar = [...]`.
			TODO - Not showing on symbol list.
			';
			match = '^\s*(_*[A-Z][^\w]*)\s*(=)\.*$';
			captures = {
				1 = { name = 'entity.name.application.class.js'; };
				2 = { name = 'keyword.operator.js'; };
			};
		},
		{	name = 'meta.declaration.property.js';
			comment = '
			[HACK] Accounts for ternaries, regex, selectors, other weirdness.
			String keys also count.
			';
			match = '[^?/{''"$,]*\b([''"]?\$*[a-z0-9_]\w*[''"]?)(:)';
			captures = {
				1 = { name = 'entity.name.property.js'; };
				2 = { name = 'keyword.operator.js'; };
			};
		},
		{ name = 'meta.declaration.variables.undefined.js';
			comment = 'Easy on the eyes. Basic.';
			match = '(?<=var)[\b\w\s,]+;$';
		},
		{	name = 'meta.function.call.js';
			comment = 'Matches `$fooBar(`. Basic.';
			match = '\b(\$*[a-z0-9_]\w*)(\()';
			captures = {
				1 = { name = 'support.other.application.function.js'; };
				2 = { name = 'meta.brace.round.js'; };
			};
		},
		{	name = 'constant.other.application.js';
			comment = '[CONVENTION] Matches `THIS_CONSTANT`.';
			match = '\b(_*([A-Z]{2,}|[A-Z][0-9A-Z_]{2,}))\b';
		},
		{	name = 'meta.property.js';
			comment = '[CONFLICTED] String keys also account.';
			match = '(?<=\.)([''"]?(\$?)[a-z0-9_]\w*[''"]?)(\.)?';
			captures = {
				1 = { name = 'entity.other.application.property.js'; };
				2 = { name = 'support.global.query.js'; };
				3 = { name = 'meta.delimiter.method.period.js'; };
			};
		},
		{	include = '#class-name'; },
	);
	repository = {
		escaped-char = {
			name = 'constant.character.escape.js';
			match = '\\(x\h{2}|[0-2][0-7]{,2}|3[0-6][0-7]?|37[0-7]?|[4-7][0-7]?|.)';
		};
		parameters = {
			name = 'entity.name.declaration.parameter.js';
			match = '(\()?(\$*\w+)?\s*(,)?(\))?';
			captures = {
				1 = { name = 'meta.brace.round.js'; };
				2 = { name = 'variable.parameter.js'; };
				3 = { name = 'meta.delimiter.comma.js'; };
				4 = { name = 'meta.brace.round.js'; };
			};
		};
		simple-escaped-char = {
			name = 'constant.character.escape.js';
			match = '\\.';
		};
		class-name = {
			name = 'entity.name.application.class.js';
			comment = '[CONVENTION] Matches `ClassFoo...`.';
			match = '\b(_*[A-Z]\w*)\b';
		};
	};
}